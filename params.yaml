# This file contains all the control parameters, hyperparameters, toggles, etc.
# needed to run the CCAO's automated valuation model

# Parameters in this file are associated with certain stages in the modeling
# pipeline. Changing a parameter means any pipeline stage associated with that
# parameter must be re-run. See dvc.yaml for parameter <-> stage associations
# and https://dvc.org/doc/command-reference/params for more information


# Run Control ------------------------------------------------------------------

# Note included with each run. Use this to summarize what changed about the run
# or add context
run_note: >
  Full CV, 1500 iters and slightly lower learn rate. New rounding splits/amounts

# Determines what stages and outputs are produced. See misc/file_dict.csv for
# details. Note, DVC does not support "conditional" stages, so changing this to
# anything other than "full" will require you to run each stage manually. See
# README for details
run_type: "full"

toggle:
  # Should the train stage run full cross-validation? Otherwise, the model
  # will be trained with the default hyperparameters specified below
  cv_enable: true
  
  # Upload all modeling artifacts and results to S3 in the finalize stage. Set
  # to FALSE if you are not a CCAO employee
  upload_to_s3: true


# Data/Ingest ------------------------------------------------------------------

# Assessment context and dates
assessment:
  # Year of assessment. Used to partition results and pull data
  year: "2022"
  
  # The statutorily "sale date" for the purpose of prediction
  date: "2022-01-01"
  
  # Added context for model artifacts stored in s3. Does not change behavior
  triad: "north"
  group: "condo"
  
  # Year from which property characteristics are pulled. Usually lags the
  # assessment year by 1
  data_year: "2021"

# Parameters used to define the input/training data
input:
  # The min and max years of sales to use for the training data sample
  min_sale_year: "2013"
  max_sale_year: "2021"
  
  # Time window (in months) used for rolling origin cross-validation and
  # calculating spatial lags i.e. lags are the average of the nearest K
  # properties for each N month window
  time_split: 9
  
  # Parameters used to construct spatially lagged features
  spatial_lag:
    # Number of nearest neighbors (K) used to calculate spatial lags of both the
    # dependent variable (sale price) and predictors (sqft, year built, etc.)
    k: 20
    
    # Standard features to create lags from + the outcome variable
    predictor: [
      "meta_sale_price",
      "char_yrblt",
      "char_land_sf",
      "char_building_pins",
      "char_building_units",
      "char_building_non_units",
      "char_building_sf",
      "other_tax_bill_amount_total"
    ]

  # Parameters used to construct condominium strata features
  strata:
    # Seed for k-means
    seed: 123
    
    # Grouping variables used in the construction of condo strata. Each group
    # will have its own independent strata of size K 1 and K 2 (see below)
    group_var: [
      "meta_triad_code"
    ]
  
    # We can use either quantiles or k-means clustering to build condo strata
    type: "kmeans"
    
    # Number of quantiles of centers to use when constructing strata
    k_1: 10
    k_2: 100
    
    # Max and min weights for mean sale price weighted by sale date
    weight_min: 0.5
    weight_max: 1.0
  
    # Number of nearest neighbors (units) used to calculate strata for condo
    # buildings without enough sales
    knn_missing: 200


# Cross-validation -------------------------------------------------------------

# Cross-validation parameters used in the train stage. Most are passed
# directly to tune_bayes()
cv:
  # Proportion of the training data to use for training vs test i.e. 0.9 means
  # the most recent 10% of sales are used as a test set
  split_prop: 0.9

  # Number of initial iterations to create before tuning. Recommend this number
  # be greater than the number of hyperparameters being tuned
  initial_set: 2
  
  # Maximum number of search iterations
  max_iterations: 5
  
  # Max number of search iterations without improvement before stopping search
  no_improve: 2
  
  # Metric used to select the "best" set of parameters from CV iterations. Must
  # be manually included the metric_set() passed to tune_bayes()
  best_metric: "rmse"


# Model (Hyper)parameters ------------------------------------------------------

# Static and tuneable parameters that define the structure and behavior of the
# model itself
model:
  engine: "lightgbm"
  
  # Objective/loss function minimized by LightGBM. See website for possible
  # options: https://lightgbm.readthedocs.io/en/latest/Parameters.html#objective
  objective: "rmse"
  seed: 20220117
  verbose: -1
  predictor:
  
    # Vector of predictors from the training data included in the model. Edit
    # this list to add or remove variables from the model
    all: [
      "meta_township_code",
      "meta_nbhd_code",
      "meta_tieback_proration_rate",
      "char_yrblt",
      "char_land_sf",
      "char_building_pins",
      "char_building_units",
      "char_building_non_units",
      "char_tiebldgpct",
      "char_building_sf",
      "char_unit_sf",
      "char_bedrooms",
      "loc_longitude",
      "loc_latitude",
      "loc_cook_municipality_name",
      "loc_env_flood_fema_sfha",
      "loc_env_flood_fs_factor",
      "loc_env_flood_fs_risk_direction",
      "loc_env_airport_noise_dnl",
      "loc_env_ohare_noise_contour_no_buffer_bool",
      "loc_school_elementary_district_geoid",
      "loc_school_secondary_district_geoid",
      "loc_school_unified_district_geoid",
      "loc_tax_special_service_area_num",
      "loc_access_cmap_walk_nta_score",
      "loc_access_cmap_walk_total_score",
      "loc_misc_subdivision_id",
      "loc_misc_unincorporated_area_bool",
      "prox_num_pin_in_half_mile",
      "prox_num_bus_stop_in_half_mile",
      "prox_num_foreclosure_per_1000_pin_past_5_years",
      "prox_num_school_in_half_mile",
      "prox_num_school_with_rating_in_half_mile",
      "prox_avg_school_rating_in_half_mile",
      "prox_nearest_bike_trail_dist_ft",
      "prox_nearest_cemetery_dist_ft",
      "prox_nearest_cta_route_dist_ft",
      "prox_nearest_cta_stop_dist_ft",
      "prox_nearest_hospital_dist_ft",
      "prox_lake_michigan_dist_ft",
      "prox_nearest_major_road_dist_ft",
      "prox_nearest_metra_route_dist_ft",
      "prox_nearest_metra_stop_dist_ft",
      "prox_nearest_park_dist_ft",
      "prox_nearest_railroad_dist_ft",
      "prox_nearest_water_dist_ft",
      "acs5_percent_age_children",
      "acs5_percent_age_senior",
      "acs5_median_age_total",
      "acs5_percent_mobility_no_move",
      "acs5_percent_mobility_moved_from_other_state",
      "acs5_percent_household_family_married",
      "acs5_percent_household_nonfamily_alone",
      "acs5_percent_education_high_school",
      "acs5_percent_education_bachelor",
      "acs5_percent_education_graduate",
      "acs5_percent_income_below_poverty_level",
      "acs5_median_income_household_past_year",
      "acs5_median_income_per_capita_past_year",
      "acs5_percent_income_household_received_snap_past_year",
      "acs5_percent_employment_unemployed",
      "acs5_median_household_total_occupied_year_built",
      "acs5_median_household_renter_occupied_gross_rent",
      "acs5_median_household_owner_occupied_value",
      "acs5_percent_household_owner_occupied",
      "acs5_percent_household_total_occupied_w_sel_cond",
      "acs5_percent_mobility_moved_in_county",
      "other_ihs_avg_year_index",
      "other_tax_bill_rate",
      "other_school_district_elementary_avg_rating",
      "other_school_district_secondary_avg_rating",
      "time_sale_year",
      "time_sale_day",
      "time_sale_quarter_of_year",
      "time_sale_month_of_year",
      "time_sale_day_of_year",
      "time_sale_day_of_month",
      "time_sale_day_of_week",
      "time_sale_post_covid",
      "meta_strata_1",
      "meta_strata_2"
    ]
    
    # List of predictors included in predictor.all which are categoricals. It is
    # CRITICAL that any categorical variables are included in this list, else
    # LightGBM will treat them as numeric
    categorical: [
      "meta_township_code",
      "meta_nbhd_code",
      "loc_cook_municipality_name",
      "loc_school_elementary_district_geoid",
      "loc_school_secondary_district_geoid",
      "loc_school_unified_district_geoid",
      "loc_tax_special_service_area_num",
      "loc_misc_subdivision_id",
      "time_sale_quarter_of_year",
      "meta_strata_1",
      "meta_strata_2"
    ]
    
    # List of variables used with the recipe step step_impute_knn(). The knn
    # variables will have missing values imputed, while the knn_imp variables
    # are used to do the imputing
    knn: [
      "meta_strata_1",
      "meta_strata_2"
    ]
    knn_imp: [
      "loc_latitude",
      "loc_longitude",
      "char_building_units",
      "char_yrblt"
    ]
    
    # List of identifiers for each observation, can be ignored
    id: [
      "meta_year",
      "meta_pin",
      "meta_class",
      "meta_sale_document_num"
    ]

  parameter:
    # Total number of iterations. Usually changed in tandem with learning_rate
    # https://lightgbm.readthedocs.io/en/latest/Parameters.html#num_iterations
    num_iterations: 1500
    learning_rate: 0.05
    
    # For CV only, proportion of the training data to hold out for use in 
    # early stopping + the metric to evaluate. See R docs for details:
    # https://lightgbm.readthedocs.io/en/latest/R/reference/lgb.train.html#arguments
    validation_prop: 0.1
    validation_metric: "rmse"
    
    # Custom parameters added by the CCAO's lightsnip wrapper package. Setting
    # to TRUE will set max_depth = floor(log2(num_leaves)) + add_to_linked_depth
    # This is to prevent tune_bayes from exploring useless parameter space
    link_max_depth: true
    
    # Maximum number of bins for discretizing continuous features. Lower uses
    # less memory and speeds up training
    max_bin: 2000
    
    # During CV, the number of iterations to go without improvement before
    # stopping training
    stop_iter: 40

  hyperparameter:
    # Default set of hyperparameters to use if CV is not enabled. See docs for
    # details: https://lightgbm.readthedocs.io/en/latest/Parameters.html
    default:
      num_leaves: 1363
      add_to_linked_depth: 1
      feature_fraction: 0.475
      min_gain_to_split: 3.73
      min_data_in_leaf: 7
      max_cat_threshold: 195
      min_data_per_group: 80
      cat_smooth: 40.44
      cat_l2: 0.83
      lambda_l1: 0.105
      lambda_l2: 0.024
    
    # Range of possible hyperparameter values for tune_bayes to explore
    range:
      num_leaves: [500, 2500]
      add_to_linked_depth: [1, 7]
      feature_fraction: [0.3, 0.8]
      min_gain_to_split: [-4.0, 1.5]
      min_data_in_leaf: [2, 150]
      max_cat_threshold: [20, 250]
      min_data_per_group: [20, 200]
      cat_smooth: [10.0, 100.0]
      cat_l2: [-3, 1]
      lambda_l1: [-3, 1]
      lambda_l2: [-3, 1]


# Post-Valuation ---------------------------------------------------------------

# Parameters used in the assess stage to finalize the intial model predictions
pv:
  # Cap the proportion of the PIN's total value dedicated to land. This is
  # necessary since sometimes the model provides low predictions relative to the
  # land rates created by Valuations
  land_pct_of_total_cap: 0.5
  
  # Rounding settings to apply to initial predictions. Rounding is done to
  # indicate to property owners that model values are estimates, not exact
  round_break: [1000, 10000, 100000]
  round_to_nearest: [1, 500, 5000, 10000]
  round_type: "floor"


# Ratio Study ------------------------------------------------------------------

# Years and assessment stages used to calculate YoY changes in the evaluate
# stage. Typically we want to compare new model values with the finalized values
# (post-appeal) from the last reassessment and the most recent values from the
# prior year
ratio_study:
  far_year: "2019"
  far_stage: "board"
  far_column: "meta_2yr_pri_board_tot"
  near_year: "2021"
  near_stage: "mailed"
  near_column: "meta_mailed_tot"
  
  # Quantile breakouts to use in the evaluate stage. For example, 3 will split
  # each geography in evaluate into terciles
  num_quantile: [3, 5, 10]
