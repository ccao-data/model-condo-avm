---
title: "Model QC"
execute:
  echo: false
  warning: false
format:
  html:
    embed-resources: true
    page-layout: full
    toc: true
    toc_float: true
    fig-align: center
    fontsize: 12pt
editor: source
params:
  run_id: '2023-02-28-recursing-nathan'
  year: '2023'
  dvc_bucket: 's3://ccao-data-dvc-us-east-1'
---

```{r setup}
options(knitr.kable.NA = "", scipen = 99, width = 150)
#options(htmlwidgets.TOJSON_ARGS = list(na = 'string'))

# Load necessary libraries
library(arrow)
library(dplyr)
library(DT)
library(ggplot2)
library(glue)
library(here)
library(htmltools)
library(kableExtra)
library(plotly)
library(purrr)
library(recipes)
library(scales)
library(skimr)
library(stringr)
library(tableone)
library(tidyr)
library(yaml)
source(here("R", "helpers.R"))

# # Initialize a dictionary of file paths. See misc/file_dict.csv for details
# paths <- model_file_dict(params$run_id, params$year)
# 
# # Grab metadata to check input alignment
# metadata <- read_parquet(paths$output$metadata$local)
# if (metadata$run_id != params$run_id) {
#   stop(
#     "Local run outputs are NOT equal to the requested run_id. You ", 
#     "should run model_fetch_run() to fetch model outputs from S3"
#   )
# }
# 
# # Get the triad of the run to use for filtering
# run_triad <- tools::toTitleCase(metadata$assessment_triad)
# run_triad_code <- ccao::town_dict %>%
#   filter(triad_name == run_triad) %>%
#   distinct(triad_code) %>%
#   pull(triad_code)
# 
# # Ingest training set used for this run from DVC bucket (if not local)
# train_md5_s3 <- metadata$dvc_md5_training_data
# train_md5_local <- digest::digest(paths$input$training$local, algo = "md5")
# train_md5 <- if (train_md5_s3 != train_md5_local) train_md5_s3 else train_md5_local
# training_path <- paste0(
#   params$dvc_bucket, "/",
#   substr(train_md5, 1, 2), "/",
#   substr(train_md5, 3, nchar(train_md5))
# )
# training_data <- read_parquet(training_path)
# 
# # Load SHAP and feature importance data
# shap_exists <- file.exists(paths$output$shap$local)
# if (shap_exists) {
#   shap_df <- read_parquet(paths$output$shap$local)
# }
# feat_imp_df <- read_parquet(paths$output$feature_importance$local)

training_data <- read_parquet(here("input/training_data.parquet")) %>% filter(!sv_is_outlier)
assessment_data <- read_parquet(here("input/assessment_data.parquet"))
strata_data <- read_parquet(here("input/condo_strata_data.parquet"))

```

## Strata

*NOTE: STRATA is the plural of STRATUM*

::: {.panel-tabset}

## Median Sale Price

``` {r strata_1}

strata_1 <- training_data %>%
    mutate(
      Stratum = as.numeric(meta_strata_1),
      Township = meta_township_name
      ) %>%
    group_by(Township, Stratum) %>%
    summarise(
      `Min` = min(meta_sale_price, na.rm = TRUE),
      `Median` = median(meta_sale_price, na.rm = TRUE),
      `Max` = max(meta_sale_price, na.rm = TRUE),
      `SD` = sd(meta_sale_price, na.rm = TRUE),
      `N` = n()
      ) %>%
    filter(!is.na(Stratum), !is.na(Median)) %>%
  rename("Median Sale Price" = "Median") %>%
  ggplot() +
  geom_line(aes(x = Stratum, y = `Median Sale Price`, color = Township)) +
  scale_y_continuous(labels = scales::dollar) +
  scale_x_continuous(breaks = seq(1, 10, 1)) +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.title.x = element_blank()
  )

ggplotly(strata_1)

```

## Strata Range

``` {r strata_2}

training_data %>%
    mutate(
      Stratum = as.numeric(meta_strata_1),
      Township = meta_township_name
      ) %>%
    group_by(Township, Stratum) %>%
    summarise(
      Range = paste(
        label_dollar()(min(meta_sale_price, na.rm = TRUE)),
        label_dollar()(median(meta_sale_price, na.rm = TRUE)),
       label_dollar()(max(meta_sale_price, na.rm = TRUE))
        )
      ) %>%
    filter(!is.na(Stratum)) %>%
  pivot_wider(
    id_cols = Township,
    names_from = Stratum,
    values_from = Range
    ) %>%
  datatable(
    rownames = FALSE,
    options = list(
      pageLength = 38,
      columnDefs = list(
        list(className = "dt-center", targets = c(1:10)),
        list(className = "dt-left", targets = c(0))
      )
    )
  ) %>%
  formatStyle(columns = c(0:10), fontSize = '85%')

```

:::

## Missing Strata

``` {r missing}


```