{{< include ../_setup.qmd >}}

# Outcomes

This section focuses on the impact of the model. It looks at outcomes such as the year-over-year percentage change in market value. It compares ```r m_assess_stage_near``` values to predicted, PIN-level values from the model. It uses the **assessment set** for all plots and tables.

## Individual Values with Large Changes

::: panel-tabset

### Map of Largest YoY Changes

Map of the 10 largest year-over-year increases in market value by neighborhood. The legend is capped at 300% to increase legibility.

```{r _outcomes_map_of_largest_change}
outcomes_map_big_changes <- assessment_pin %>%
  group_by(meta_nbhd_code) %>%
  left_join(ccao::nbhd_shp, by = c("meta_nbhd_code" = "town_nbhd")) %>%
  distinct(meta_pin, .keep_all = TRUE) %>%
  filter(!is.na(prior_near_yoy_change_pct), !is.na(loc_latitude)) %>%
  mutate(
    prior_near_yoy_change_pct = prior_near_yoy_change_pct * 100,
    neighborhood_median_change = median(prior_near_yoy_change_pct)
  ) %>%
  slice_max(prior_near_yoy_change_pct, n = 10) %>%
  mutate(capped_yoy_change = pmin(prior_near_yoy_change_pct, 300))

outcomes_map_nbhd_increases <- st_as_sf(outcomes_map_big_changes) %>%
  distinct(meta_nbhd_code, .keep_all = TRUE)

outcomes_map_color_palette <-
  colorNumeric(
    palette = "YlGnBu",
    domain = c(min(outcomes_map_big_changes$prior_near_yoy_change_pct), 300)
  )

leaflet() %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    data = outcomes_map_nbhd_increases,
    fillColor = "white",
    weight = 1,
    color = "black",
    opacity = 1,
    fillOpacity = 0.5
  ) %>%
  addCircleMarkers(
    data = outcomes_map_big_changes,
    ~loc_longitude,
    ~loc_latitude,
    color = ~ outcomes_map_color_palette(capped_yoy_change),
    opacity = 0.7,
    fillOpacity = 0.7,
    radius = 1,
    popup = ~ paste0(
      "PIN: ",
      "<a target='_blank' rel='noopener noreferrer' ",
      "href='https://www.cookcountyassessor.com/pin/", meta_pin,
      "'>", meta_pin, "</a>",
      "<br>Neighborhood: ", meta_nbhd_code,
      "<br>Class: ", meta_class,
      "<hr>",
      tools::toTitleCase(m_assess_stage_near), " FMV: ",
      scales::dollar(prior_near_tot),
      "<br>Estimated FMV: ",
      scales::dollar(pred_pin_final_fmv_round),
      "<br>YoY Change: ",
      round(prior_near_yoy_change_pct, 2), "%"
    )
  ) %>%
  addLegend(
    "bottomright",
    pal = outcomes_map_color_palette,
    values = c(min(outcomes_map_big_changes$prior_near_yoy_change_pct), 300),
    title = "YoY Change",
    labFormat = labelFormat(suffix = "%")
  ) %>%
  setView(
    lng = mean(outcomes_map_big_changes$loc_longitude),
    lat = mean(outcomes_map_big_changes$loc_latitude),
    zoom = 10
  )
```

### Table of Largest YoY Changes

Table of the 5 PINs in each township which had the largest percentage year-over-year increase in market value. Excludes any PINs which had a prior year market value of less than $25,000.

```{r _outcomes_table_of_largest_change}
outcomes_map_big_changes %>%
  distinct(meta_pin, .keep_all = TRUE) %>%
  filter(prior_near_tot > 25000) %>%
  group_by(meta_township_code) %>%
  slice_max(order_by = prior_near_yoy_change_nom, n = 5) %>%
  ungroup() %>%
  distinct(meta_pin, .keep_all = TRUE) %>%
  mutate(
    Pin = meta_pin,
    Township = meta_township_code,
    Neighborhood = meta_nbhd_code,
    Class = meta_class,
    Address = loc_property_address,
    "Previous Value" = scales::dollar(prior_near_tot),
    "Predicted Value" = scales::dollar(pred_pin_final_fmv_round),
    "Nominal Change" = scales::dollar(prior_near_yoy_change_nom),
    "Percent Change" = scales::percent(
      round(prior_near_yoy_change_pct, 2) / 100
    ),
    "Recent Sale Date" = sale_recent_1_date,
    "Recent Sale Price" = scales::dollar(sale_recent_1_price),
    "Year Built" = char_yrblt,
    "Median Neighborhood Change" = scales::percent(
      round(neighborhood_median_change, 2) / 100
    )
  ) %>%
  select(
    Pin,
    Township,
    Neighborhood,
    Class,
    Address,
    `Previous Value`,
    `Predicted Value`,
    `Nominal Change`,
    `Percent Change`,
    `Recent Sale Date`,
    `Recent Sale Price`,
    `Year Built`,
    `Median Neighborhood Change`
  ) %>%
  datatable(
    options = list(
      pageLength = 10,
      scrollX = TRUE,
      columnDefs = list(
        list(
          className = "dt-right",
          targets = c(
            "Previous Value", "Predicted Value", "Nominal Change",
            "Percent Change", "Recent Sale Date", "Recent Sale Price",
            "Median Neighborhood Change"
          )
        )
      )
    ),
    filter = "top",
    rownames = FALSE
  )
```

:::

## Change in Median Value by Geography

::: panel-tabset

### By Neighborhood

```{r _outcomes_map_of_neighborhood_change}
outcomes_map_breaks <- c(-Inf, 0, 10, 20, 30, 40, 50, 60, Inf)
outcomes_map_labels <- c(
  "< 0%", "0% - 10%", "10% - 20%", "20% - 30%",
  "30% - 40%", "40% - 50%", "50% - 60%", "> 60%"
)
outcomes_map_labels <- factor(
  x = outcomes_map_labels,
  levels = outcomes_map_labels
)

outcomes_map_nbhd_delta <- model_performance_assessment %>%
  filter(
    triad_code == run_triad_code,
    !by_class,
    geography_type == "nbhd_code"
  ) %>%
  select(
    meta_nbhd_code = geography_id,
    neighborhood_median_change = prior_near_yoy_pct_chg_median,
    prior_near_fmv_median,
    estimate_fmv_median,
    sale_fmv_median, num_sale
  ) %>%
  mutate(
    neighborhood_median_change = neighborhood_median_change * 100,
    township = ccao::town_convert(substr(meta_nbhd_code, 1, 2)),
    change_category = cut(
      neighborhood_median_change,
      breaks = outcomes_map_breaks,
      labels = outcomes_map_labels,
      include.lowest = TRUE
    )
  )

outcomes_map_nbhd_delta_sf <- ccao::nbhd_shp %>%
  inner_join(
    outcomes_map_nbhd_delta,
    by = c("town_nbhd" = "meta_nbhd_code")
  ) %>%
  rename(meta_nbhd_code = town_nbhd)

outcomes_map_nbhd_palette <- colorFactor(
  palette = c("#e34a33", "#ffffff", RColorBrewer::brewer.pal(6, "YlGnBu")),
  domain = outcomes_map_nbhd_delta_sf$change_category
)

leaflet(data = outcomes_map_nbhd_delta_sf) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~ outcomes_map_nbhd_palette(change_category),
    color = "black",
    weight = 1,
    opacity = 1,
    fillOpacity = 0.5,
    smoothFactor = 0.5,
    popup = ~ paste0(
      "Township: ", township_name,
      "<br>Neighborhood: ", meta_nbhd_code,
      "<hr>",
      "Num. Sales: ", scales::comma(num_sale),
      "<br>Med. Sale FMV: ", scales::dollar(sale_fmv_median),
      "<hr>",
      "Med. ", tools::toTitleCase(m_assess_stage_near), " FMV: ",
      scales::dollar(prior_near_fmv_median),
      "<br>Med. Estimated FMV: ",
      scales::dollar(estimate_fmv_median),
      "<br>Med. YoY Change: ", round(neighborhood_median_change, 2), "%"
    )
  ) %>%
  addLegend(
    position = "bottomright",
    pal = outcomes_map_nbhd_palette,
    values = outcomes_map_labels,
    title = "Median YoY Change",
    opacity = 0.5
  )
```

### By Township

```{r _outcomes_map_of_township_change}
outcomes_map_township_delta <- model_performance_assessment %>%
  filter(
    triad_code == run_triad_code,
    !by_class,
    geography_type == "township_code"
  ) %>%
  select(
    township_code = geography_id,
    township_median_change = prior_near_yoy_pct_chg_median,
    prior_near_fmv_median,
    estimate_fmv_median,
    sale_fmv_median, num_sale
  ) %>%
  mutate(
    township_median_change = township_median_change * 100,
    township = ccao::town_convert(township_code),
    change_category = cut(
      township_median_change,
      breaks = outcomes_map_breaks,
      labels = outcomes_map_labels,
      include.lowest = TRUE
    )
  )

outcomes_map_township_delta_sf <- ccao::town_shp %>%
  inner_join(outcomes_map_township_delta, by = "township_code")

outcomes_map_township_palette <- colorFactor(
  palette = c("#e34a33", "#ffffff", RColorBrewer::brewer.pal(6, "YlGnBu")),
  domain = outcomes_map_township_delta_sf$change_category
)

leaflet(data = outcomes_map_township_delta_sf) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(
    fillColor = ~ outcomes_map_township_palette(change_category),
    color = "black",
    weight = 1,
    opacity = 1,
    fillOpacity = 0.5,
    smoothFactor = 0.5,
    popup = ~ paste0(
      "Township: ", township_name,
      "<hr>",
      "Num. Sales: ", scales::comma(num_sale),
      "<br>Med. Sale FMV: ", scales::dollar(sale_fmv_median),
      "<hr>",
      "Med. ", tools::toTitleCase(m_assess_stage_near), " FMV: ",
      scales::dollar(prior_near_fmv_median),
      "<br>Med. Estimated FMV: ",
      scales::dollar(estimate_fmv_median),
      "<br>Med. YoY Change: ", round(township_median_change, 2), "%"
    )
  ) %>%
  addLegend(
    position = "bottomright",
    pal = outcomes_map_township_palette,
    values = outcomes_map_labels,
    title = "Median YoY Change",
    opacity = 0.5
  )
```

:::

## Change In and Out-of-Sample

If the training sample is representative of the housing stock at large we should
see similar changes in AVs between the previous year and predictions regardless
of whether a home has sold recently. This table compares the median change in AV
(dollar and percentage) for homes which have sold in the three years prior to
the assessment year those which did not sell.

```{r _model_in_v_out_of_sample_delta}
stats_median_yoy_delta <- assessment_pin %>%
  filter(meta_triad_code == run_triad_code) %>%
  mutate(
    Township = ccao::town_convert(meta_township_code),
    prior_far_yoy_change_pct = as.numeric(prior_far_yoy_change_pct),
    prior_near_yoy_change_nom = as.numeric(prior_near_yoy_change_nom),
    is_recent_sale = case_when(
      lubridate::year(sale_recent_1_date) >=
        as.numeric(metadata$input_max_sale_year) - 3 ~ TRUE,
      TRUE ~ FALSE
    )
  ) %>%
  filter(
    !is.na(prior_near_yoy_change_pct),
    !is.na(prior_near_yoy_change_nom)
  ) %>%
  summarize(
    yoy_change_percent = median(prior_near_yoy_change_pct, na.rm = TRUE),
    yoy_change_dollars = median(prior_near_yoy_change_nom, na.rm = TRUE),
    .by = c(Township, is_recent_sale)
  ) %>%
  pivot_wider(
    id_cols = Township,
    names_from = is_recent_sale,
    values_from = c(yoy_change_percent, yoy_change_dollars)
  ) %>%
  mutate(
    change_percent_ratio =
      round(yoy_change_percent_TRUE / yoy_change_percent_FALSE, 2),
    change_dollars_ratio =
      round(yoy_change_dollars_TRUE / yoy_change_dollars_FALSE, 2),
    yoy_change_percent_TRUE =
      scales::percent(yoy_change_percent_TRUE, accuracy = 2),
    yoy_change_percent_FALSE =
      scales::percent(yoy_change_percent_FALSE, accuracy = 2),
    yoy_change_dollars_TRUE = scales::dollar(yoy_change_dollars_TRUE),
    yoy_change_dollars_FALSE = scales::dollar(yoy_change_dollars_FALSE)
  ) %>%
  select(
    Township,
    change_percent_ratio, yoy_change_percent_TRUE, yoy_change_percent_FALSE,
    change_dollars_ratio, yoy_change_dollars_TRUE, yoy_change_dollars_FALSE,
  )

stats_median_yoy_delta %>%
  mutate(
    change_percent_ratio = cell_spec(
      change_percent_ratio,
      color = ifelse(between(change_percent_ratio, 0.95, 1.05), "green", "red")
    ),
    change_dollars_ratio = cell_spec(
      change_dollars_ratio,
      color = ifelse(between(change_dollars_ratio, 0.95, 1.05), "green", "red")
    )
  ) %>%
  kable(
    "html",
    escape = F, col.names = rep("", 7), align = c("l", rep("c", 6))
  ) %>%
  kable_styling(full_width = F) %>%
  add_header_above(c(
    "Township" = 1,
    "Ratio" = 1,
    "Sold" = 1,
    "Unsold" = 1,
    "Ratio" = 1,
    "Sold" = 1,
    "Unsold" = 1
  )) %>%
  add_header_above(c(" " = 1, "Percentage Change" = 3, "Dollar Change" = 3)) %>%
  add_header_above(
    c("Comparison of YOY Change in AV for Sold and Unsold Houses" = 7)
  )
```

## Strata
Strata refers to the department's grouping of 

::: panel-tabset

```{r}
strata <- assessment_pin %>%
  select(meta_pin, meta_strata_1, pred_pin_final_fmv, sale_recent_1_price,
         township = meta_township_code, imputed = flag_strata_is_imputed) %>%
  left_join(training_data %>% select(meta_pin, meta_sale_price), by = "meta_pin") %>%
  group_by(meta_strata_1) %>%
  mutate(meta_strata_1 = as.numeric(meta_strata_1)) %>%
  filter(!is.na(pred_pin_final_fmv))
```

### Mailed Values * 10

```{r}
strata %>%
  ggplot(aes(x = factor(meta_strata_1), y = pred_pin_final_fmv, fill = imputed)) +
  geom_boxplot() +
  scale_y_continuous(limits = c(0, 2000000), labels = scales::dollar_format()) +
  labs(
    x = "Strata",
    y = "FMV",
    fill = "Imputation Status"
  ) +
  theme_minimal() +
  theme(legend.position = "top")

```

### Sale Prices

```{r}
strata %>%
  ggplot(aes(x = factor(meta_strata_1), y = sale_recent_1_price, fill = imputed)) +
  geom_boxplot() +
  scale_y_continuous(limits = c(0, 2000000), labels = scales::dollar_format()) +
  labs(
    x = "Strata",
    y = "FMV",
    fill = "Imputation Status"
  ) +
  theme_minimal() +
  theme(legend.position = "top")

```

### Table of Descriptive Stats
```{r}
strata_descriptive <- strata %>%
  group_by(meta_strata_1) %>%
  summarize(
    predicted_pin_min = min(pred_pin_final_fmv, na.rm = TRUE),
    meta_sale_price_min = min(meta_sale_price, na.rm = TRUE),
    predicted_pin_mean = mean(pred_pin_final_fmv, na.rm = TRUE),
    meta_sale_price_mean = mean(meta_sale_price, na.rm = TRUE),
    predicted_pin_median = median(pred_pin_final_fmv, na.rm = TRUE),
    meta_sale_price_median = median(meta_sale_price, na.rm = TRUE),
    predicted_pin_max = max(pred_pin_final_fmv, na.rm = TRUE),
    meta_sale_price_max = max(meta_sale_price, na.rm = TRUE)
  ) %>%
  rename_with(~ sub("^meta_", "", .x),
              strata = "strata_1") %>%
  mutate(
    across(2:ncol(.), ~ dollar(round(., 2))) # Ignore strata in the formatting
  )

# Display with DT
datatable(strata_descriptive, options = list(pageLength = 20, autoWidth = TRUE, scrollX = TRUE))


```
:::

## Strata Sale Prices vs Mailed Values

```{r}
strata_groups <- strata %>%
  filter(!is.na(meta_sale_price)) %>%
  split(.$meta_strata_1)

plots <- map(strata_groups, ~ {
  p <- ggplot(.x, aes(x = pred_pin_final_fmv, y = meta_sale_price, 
                      color = township,
                      text = paste("PIN:", meta_pin, 
                                   "<br>Sale Price:", dollar(meta_sale_price), 
                                   "<br>Assessed Value:", dollar(pred_pin_final_fmv),
                                   "<br>Township:", township))) +
    geom_point() +
    labs(x = "Mailed Total * 10", 
         y = "Sale Price", 
         title = paste("Scatter Plot of Mailed Total vs. Sale Price - Strata", unique(.x$meta_strata_1))) +
    scale_x_continuous(limits = c(0, 2000000), labels = dollar) +  # Cap x-axis and format as dollars
    scale_y_continuous(limits = c(0, 2000000), labels = dollar) +  # Cap y-axis and format as dollars
    theme_minimal()
  
  ggplotly(p, tooltip = "text")
})
```

```{r strata_scatterplot, results='asis'}
iwalk(plots, ~ {
  cat("## ", .y, "\n\n")

  print(.x)

  cat("\n\n")
})
```

:::
